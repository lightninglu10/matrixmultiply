#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <emmintrin.h>

int sum_vectorized_unrolled( int n, int *a )
{
    __m128i vect = _mm_setzero_si128();
    int sum = 0;
    int i;
    int p[] = {0, 0, 0, 0};
    for (i = 0; i < n/32 * 32; i += 32) {
        vect = _mm_add_epi32(_mm_loadu_si128((__m128i *) (a + i)), vect);
        vect = _mm_add_epi32(_mm_loadu_si128((__m128i *) (a + i) + 1), vect);
        vect = _mm_add_epi32(_mm_loadu_si128((__m128i *) (a + i) + 2), vect);
        vect = _mm_add_epi32(_mm_loadu_si128((__m128i *) (a + i) + 3), vect);
        vect = _mm_add_epi32(_mm_loadu_si128((__m128i *) (a + i) + 4), vect);
        vect = _mm_add_epi32(_mm_loadu_si128((__m128i *) (a + i) + 5), vect);
        vect = _mm_add_epi32(_mm_loadu_si128((__m128i *) (a + i) + 6), vect);
        vect = _mm_add_epi32(_mm_loadu_si128((__m128i *) (a + i) + 7), vect);
    }
    _mm_storeu_si128((__m128i *) p, vect);
    sum = p[0] + p[1] + p[2] + p[3];
    for( int i = n/32 * 32; i < n; i++)
       sum += a[i];

    return sum;
}

void sgemm( int m, int n, int d, float *A, float *C ) {
    int p[] = {0, 0, 0, 0};
    __m128 vect;
    __m128 ATmatrix;
    __m128 Cmatrix;

    int k, i, j;

    for(k = 0; k < m; k++) {
	for(j = 0; j < n; j++) {
	    ATmatrix =  _mm_load1_ps(A + (j * (n + 1) + (k) * (n)));
	    for(i = 0; i < n/16 * 16; i += 16) {
		Cmatrix = _mm_loadu_ps(C + i + j * n);
		vect = _mm_mul_ps(_mm_loadu_ps(A + i + (k)*(n)), ATmatrix);
		Cmatrix = _mm_add_ps(Cmatrix, vect);
		_mm_storeu_ps(C + (i + j * n), Cmatrix);

		Cmatrix = _mm_loadu_ps((C + i + j * n) + 1);
		vect = _mm_mul_ps(_mm_loadu_ps((A + i + (k)*(n)) + 1), ATmatrix);
		Cmatrix = _mm_add_ps(Cmatrix, vect);
		_mm_storeu_ps((C + i + j * n) + 1, Cmatrix);
		
		Cmatrix = _mm_loadu_ps((C + i + j * n) + 2);
		vect = _mm_mul_ps(_mm_loadu_ps((A + i + (k)*(n)) + 2), ATmatrix);
		Cmatrix = _mm_add_ps(Cmatrix, vect);
		_mm_storeu_ps((C + i + j * n) + 2, Cmatrix);
		
		Cmatrix = _mm_loadu_ps((C + i + j * n) + 3);
		vect = _mm_mul_ps(_mm_loadu_ps((A + i + (k)*(n)) + 3), ATmatrix);
		Cmatrix = _mm_add_ps(Cmatrix, vect);
		_mm_storeu_ps((C + i + j * n) + 3, Cmatrix);
	    }
	    for (i = n/16*16; i < n; i ++) {
		C[i+j*n] += A[i+(k)*(n)] *  A[j*(n+1)+(k)*(n)];
	    }
	}
    }
}

/*				C[i+j*n] += A[i+(k)*(n)] * A[j*(n+1)+(k)*(n)];
				C[i+j*n] += A[i+(k+1)*(n)] * A[j*(n+1)+(k+1)*(n)];
				C[i+j*n] += A[i+(k+2)*(n)] * A[j*(n+1)+(k+2)*(n)];
				C[i+j*n] += A[i+(k+3)*(n)] * A[j*(n+1)+(k+3)*(n)];*/



/*				C[i+j*n] += A[i+(k)*(n)] * A[j*(n+1)+(k)*(n)];
				C[i+(j+1)*n] += A[i+k*(n)] * A[(j+1)*(n+1)+k*(n)];
				C[i+(j+2)*n] += A[i+k*(n)] * A[(j+2)*(n+1)+k*(n)];
				C[i+(j+3)*n] += A[i+k*(n)] * A[(j+3)*(n+1)+k*(n)];

				C[(i+1)+j*n] += A[(i+1)+k*(n)] * A[j*(n+1)+k*(n)];
				C[(i+1)+(j+1)*n] += A[(i+1)+k*(n)] * A[(j+1)*(n+1)+k*(n)];
				C[(i+1)+(j+2)*n] += A[(i+1)+k*(n)] * A[(j+2)*(n+1)+k*(n)];
				C[(i+1)+(j+3)*n] += A[(i+1)+k*(n)] * A[(j+3)*(n+1)+k*(n)];

				C[(i+2)+j*n] += A[(i+2)+k*(n)] * A[j*(n+1)+k*(n)];
				C[(i+2)+(j+1)*n] += A[(i+2)+k*(n)] * A[(j+1)*(n+1)+k*(n)];
				C[(i+2)+(j+2)*n] += A[(i+2)+k*(n)] * A[(j+2)*(n+1)+k*(n)];
				C[(i+2)+(j+3)*n] += A[(i+2)+k*(n)] * A[(j+3)*(n+1)+k*(n)];

				C[(i+3)+j*n] += A[(i+3)+k*(n)] * A[j*(n+1)+k*(n)];
				C[(i+3)+(j+1)*n] += A[(i+3)+k*(n)] * A[(j+1)*(n+1)+k*(n)];
				C[(i+3)+(j+2)*n] += A[(i+3)+k*(n)] * A[(j+2)*(n+1)+k*(n)];
				C[(i+3)+(j+3)*n] += A[(i+3)+k*(n)] * A[(j+3)*(n+1)+k*(n)];*/


/*				//k = 1
				C[i+j*n] += A[i+(k+1)*(n)] * A[j*(n+1)+(k+1)*(n)];
				C[(i+0)+(j+1)*n] += A[i+(k+1)*(n)] * A[(j+1)*(n+1)+(k+1)*(n)];
				C[(i+0)+(j+2)*n] += A[(i+0)+(k+1)*(n)] * A[(j+2)*(n+1)+(k+1)*(n)];
				C[(i+0)+(j+3)*n] += A[(i+0)+(k+1)*(n)] * A[(j+3)*(n+1)+(k+1)*(n)];

				C[(i+1)+j*n] += A[(i+1)+(k+1)*(n)] * A[j*(n+1)+(k+1)*(n)];
				C[(i+1)+(j+1)*n] += A[(i+1)+(k+1)*(n)] * A[(j+1)*(n+1)+(k+1)*(n)];
				C[(i+1)+(j+2)*n] += A[(i+1)+(k+1)*(n)] * A[(j+2)*(n+1)+(k+1)*(n)];
				C[(i+1)+(j+3)*n] += A[(i+1)+(k+1)*(n)] * A[(j+3)*(n+1)+(k+1)*(n)];

				C[(i+2)+j*n] += A[(i+2)+(k+1)*(n)] * A[j*(n+1)+(k+1)*(n)];
				C[(i+2)+(j+1)*n] += A[(i+2)+(k+1)*(n)] * A[(j+1)*(n+1)+(k+1)*(n)];
				C[(i+2)+(j+2)*n] += A[(i+2)+(k+1)*(n)] * A[(j+2)*(n+1)+(k+1)*(n)];
				C[(i+2)+(j+3)*n] += A[(i+2)+(k+1)*(n)] * A[(j+3)*(n+1)+(k+1)*(n)];

				C[(i+3)+j*n] += A[(i+3)+(k+1)*(n)] * A[j*(n+1)+(k+1)*(n)];
				C[(i+3)+(j+1)*n] += A[(i+3)+(k+1)*(n)] * A[(j+1)*(n+1)+(k+1)*(n)];
				C[(i+3)+(j+2)*n] += A[(i+3)+(k+1)*(n)] * A[(j+2)*(n+1)+(k+1)*(n)];
				C[(i+3)+(j+3)*n] += A[(i+3)+(k+1)*(n)] * A[(j+3)*(n+1)+(k+1)*(n)];

				//k = 2

				C[i+j*n] += A[i+(k+2)*(n)] * A[j*(n+1)+(k+2)*(n)];
				C[(i+0)+(j+1)*n] += A[i+(k+2)*(n)] * A[(j+1)*(n+1)+(k+2)*(n)];
				C[(i+0)+(j+2)*n] += A[(i)+(k+2)*(n)] * A[(j+2)*(n+1)+(k+2)*(n)];
				C[(i+0)+(j+3)*n] += A[(i)+(k+2)*(n)] * A[(j+3)*(n+1)+(k+2)*(n)];

				C[(i+1)+j*n] += A[(i+1)+(k+2)*(n)] * A[j*(n+1)+(k+2)*(n)];
				C[(i+1)+(j+1)*n] += A[(i+1)+(k+2)*(n)] * A[(j+1)*(n+1)+(k+2)*(n)];
				C[(i+1)+(j+2)*n] += A[(i+1)+(k+2)*(n)] * A[(j+2)*(n+1)+(k+2)*(n)];
				C[(i+1)+(j+3)*n] += A[(i+1)+(k+2)*(n)] * A[(j+3)*(n+1)+(k+2)*(n)];

				C[(i+2)+j*n] += A[(i+2)+(k+2)*(n)] * A[j*(n+1)+(k+2)*(n)];
				C[(i+2)+(j+1)*n] += A[(i+2)+(k+2)*(n)] * A[(j+1)*(n+1)+(k+2)*(n)];
				C[(i+2)+(j+2)*n] += A[(i+2)+(k+2)*(n)] * A[(j+2)*(n+1)+(k+2)*(n)];
				C[(i+2)+(j+3)*n] += A[(i+2)+(k+2)*(n)] * A[(j+3)*(n+1)+(k+2)*(n)];

				C[(i+3)+j*n] += A[(i+3)+(k+2)*(n)] * A[j*(n+1)+(k+2)*(n)];
				C[(i+3)+(j+1)*n] += A[(i+3)+(k+2)*(n)] * A[(j+1)*(n+1)+(k+2)*(n)];
				C[(i+3)+(j+2)*n] += A[(i+3)+(k+2)*(n)] * A[(j+2)*(n+1)+(k+2)*(n)];
				C[(i+3)+(j+3)*n] += A[(i+3)+(k+2)*(n)] * A[(j+3)*(n+1)+(k+2)*(n)];

				//k = 3

				C[i+j*n] += A[i+(k+3)*(n)] * A[j*(n+1)+(k+3)*(n)];
				C[(i+0)+(j+1)*n] += A[i+(k+3)*(n)] * A[(j+1)*(n+1)+(k+3)*(n)];
				C[(i+0)+(j+2)*n] += A[(i)+(k+3)*(n)] * A[(j+2)*(n+1)+(k+3)*(n)];
				C[(i+0)+(j+3)*n] += A[(i)+(k+3)*(n)] * A[(j+3)*(n+1)+(k+3)*(n)];

				C[(i+1)+j*n] += A[(i+1)+(k+3)*(n)] * A[j*(n+1)+(k+3)*(n)];
				C[(i+1)+(j+1)*n] += A[(i+1)+(k+3)*(n)] * A[(j+1)*(n+1)+(k+3)*(n)];
				C[(i+1)+(j+2)*n] += A[(i+1)+(k+3)*(n)] * A[(j+2)*(n+1)+(k+3)*(n)];
				C[(i+1)+(j+3)*n] += A[(i+1)+(k+3)*(n)] * A[(j+3)*(n+1)+(k+3)*(n)];

				C[(i+2)+j*n] += A[(i+2)+(k+3)*(n)] * A[j*(n+1)+(k+3)*(n)];
				C[(i+2)+(j+1)*n] += A[(i+2)+(k+3)*(n)] * A[(j+1)*(n+1)+(k+3)*(n)];
				C[(i+2)+(j+2)*n] += A[(i+2)+(k+3)*(n)] * A[(j+2)*(n+1)+(k+3)*(n)];
				C[(i+2)+(j+3)*n] += A[(i+2)+(k+3)*(n)] * A[(j+3)*(n+1)+(k+3)*(n)];

				C[(i+3)+j*n] += A[(i+3)+(k+3)*(n)] * A[j*(n+1)+(k+3)*(n)];
				C[(i+3)+(j+1)*n] += A[(i+3)+(k+3)*(n)] * A[(j+1)*(n+1)+(k+3)*(n)];
				C[(i+3)+(j+2)*n] += A[(i+3)+(k+3)*(n)] * A[(j+2)*(n+1)+(k+3)*(n)];
				C[(i+3)+(j+3)*n] += A[(i+3)+(k+3)*(n)] * A[(j+3)*(n+1)+(k+3)*(n)];
*/
